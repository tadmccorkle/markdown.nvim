*markdown.nvim.txt* Make working with markdown in Neovim more enjoyable.

                                MARKDOWN.NVIM

Author: Tad McCorkle <https://www.github.com/tadmccorkle>
License: MIT License

================================================================================
CONTENTS                                              *markdown.nvim.contents*

    Introduction ............................................ |markdown.nvim|
    Usage .................................................. |markdown.usage|
        Inline Surround ................................... |markdown.inline|
            Toggle ................................. |markdown.inline.toggle|
            Delete ................................. |markdown.inline.delete|
            Change ................................. |markdown.inline.change|
        Table of Contents .................................... |markdown.toc|
            Omit Sections/Headings ...................... |markdown.toc.omit|
        List Editing ....................................... |markdown.lists|
            Insert Items ....................... |markdown.lists.insert_item|
            Reset Numbering ................ |markdown.lists.reset_numbering|
            Toggle Tasks ....................... |markdown.lists.toggle_task|
        Links .............................................. |markdown.links|
            Add ........................................ |markdown.links.add|
            Follow .................................. |markdown.links.follow|
            Paste URLs ............................... |markdown.links.paste|
        Navigation .................................... |markdown.navigation|
    Configuration .................................. |markdown.configuration|

================================================================================
INTRODUCTION                                                   *markdown.nvim*

|markdown.nvim| is a plugin that provides tools for working with markdown
files in Neovim, including inline-style keybindings over vim motions and
convenience features like table of contents insertion and auto-numbering of
ordered lists.

================================================================================
USAGE                                                         *markdown.usage*

|markdown.nvim| is broken up into different feature categories:

* Inline Surround (|markdown.inline|)
* Table of Contents (|markdown.toc|)
* List Editing (|markdown.lists|)
* Links (|markdown.links|)
* Navigation (|markdown.navigation|)

--------------------------------------------------------------------------------
INLINE SURROUND                                              *markdown.inline*

|markdown.nvim| provides keymaps to toggle, delete, and change emphasis and
code spans, which will also be referred to in this section as "styles". The
supported styles and the default keys used to refer to them are:

* emphasis (typically rendered in italic)   "i"
* strong (typically rendered in bold)       "b"
* strikethrough                             "s"
* code span                                 "c"

Keymaps are set up after |markdown.nvim| is either configured with a call to
|markdown.setup()| or registered as an |nvim-treesitter| module (see
|markdown.configuration|). |<Plug>| mappings are created regardless of
configuration (see |markdown.plug_mappings|).

TOGGLE                                                *markdown.inline.toggle*

Inline styles can be toggled over vim motions in normal and visual mode.
Toggled styles are only applied to appropriate markdown elements (i.e., not
blank lines, list markers, etc.). For example, a motion that includes a list
marker and multiple blocks will only apply the style to inline content:

                       toggle strong over five lines ~
>
            paragraph block                    **paragraph block**
            - list item                        - **list item**
                                   ---->
            another paragraph                  **another pargraph
            over two lines                     over two lines**
<
In normal mode this is done with `gs{motion}{style}`, where `{style}` is
the key corresponding to the style to toggle (by default "i", "b", "s", or
"c"). Like other vim motions, a |[count]| can be specified before and after
the `gs`. Emphasis can also be toggled over the current line using
`gss{style}`. A |[count]| can be specified to toggle over multiple lines.

        Before                  Command             After ~
>
        ^some text              gs2es               ~~some text~~
        some t^ext              gsiwb               some **text**
        some *t^ext*            gsiwi               some text
        ***some^ text***        gssb                *some text*
<
`^` denotes cursor position

Styles can be toggled in visual mode based on a visual selection using
`gs{style}`.

        Before                  Command             After ~
>
        ^some text$             gss                 ~~some text~~
        some ^text$             gsb                 some **text**
        some *^text$*           gsi                 some text
        ***^some text$***       gsb                 *some text*
<
`^` and `$` denote selection start and end, respectively

Styles can also be toggled in visual block mode.

        Before                  Command             After ~
>
        - list ^item$ 1                             - list *item* 1
        - li2                                       - li2
                                gsi
        - list ^item$ 3                             - list *item* 3
        - list ^item$ 4                             - list *item* 4
<
`^` and `$` denote block selection start and end on each line, respectively

See |markdown.config.on_attach| for an example of how to configure
standard/typical inline style keybindings in visual mode like `<C-b>` for
strong/bold and `<C-i>` for for emphasis/italic.

DELETE                                                *markdown.inline.delete*

Inline styles around the cursor can be deleted in normal mode using
`ds{style}`, where `{style}` is the key corresponding to the style to
delete (by default "i", "b", "s", or "c"). Only the style directly surrounding
the cursor will be deleted.

        Before                  Command             After ~
>
        **some^ *text***        dsb                 some *text*
        **some *t^ext***        dsb                 some *text*
        **some **t^ext****      dsb                 **some text**
<
`^` denotes cursor position

CHANGE                                                *markdown.inline.change*

Inline styles around the cursor can be changed in normal mode using
`cs{from}{to}`, where `{from}` and `{to}` are the keys corresponding to the
current style (`{from}`) and the new style (`{to}`) (by default "i", "b", "s",
or "c"). Only the matching `{from}` style directly surrounding the cursor will
be changed.

        Before                  Command             After ~
>
        **some^ *text***        csbi                *some *text**
        **some *t^ext***        csbi                *some *text**
        **some **t^ext****      csbs                **some ~~text~~**
<
`^` denotes cursor position

--------------------------------------------------------------------------------
TABLE OF CONTENTS                                               *markdown.toc*

A table of contents (TOC) is created from the top-level (i.e., not within a
container like lists or block quotes) headings of markdown buffers.

                                                                *:MDInsertToc*
:MDInsertToc[/max_level][/markers...]
:MDInsertToc [max_level] [markers...]

        Adds a TOC for the current buffer by inserting (normal mode) or
        replacing selected lines (visual mode). The TOC is based on ATX and
        setext headings.

        Optional arguments can be separated by `/` or whitespace. When
        separated by `/`, markers will include any leading or trailing
        whitespace. Multiple markers can be specified (for example,
        `:MDInsertTOC - +` or `:MDInsertTOC/-/+`).

        Ordered lists are specified with `"."` and `")"` marker arguments.

        Arguments:
            * max_level     max heading level to include
                            Default: "6"

            * markers       markers to alternate through for each heading
                            level
                            Default: "-" (unless overridden by configuration)
                            See: |markdown.config.toc.markers|

                                                                      *:MDToc*
:MDToc [max_level]

        Shows a TOC for the current buffer in the current window's location
        list. Any flagged headings (see |markdown.toc.omit|) will also be
        omitted in the location list.

        Arguments:
            * max_level     max heading level to include
                            Default: "6"

                                                                   *:MDTocAll*
:MDTocAll [max_level]

        Shows a TOC for the current buffer in the current window's location
        list. All headings, including those flagged as omitted (see
        |markdown.toc.omit|), are included.

        Arguments:
            * max_level     max heading level to include
                            Default: "6"

OMIT HEADINGS                                              *markdown.toc.omit*

Headings and entire sections can be omitted from the TOC by flagging them with
`<!-- toc omit heading -->` and `<!-- toc omit section -->`, respectively. The
flag can either be placed directly above (i.e., on the line immediately
preceding) or within the heading content. For example, the following headings
would be omitted:
>markdown
        # heading 1 <!-- toc omit heading -->

        <!-- toc omit heading -->
        ## heading 2

        ## heading <!-- toc omit heading --> 3

        Heading 4 <!-- toc omit heading -->
        ---------

        <!-- toc omit heading -->
        Heading 5
        ---------

        <!-- toc omit section -->
        # section heading omitted
        ## subsection heading also omitted
<
--------------------------------------------------------------------------------
LIST EDITING                                                  *markdown.lists*

INSERT ITEMS                                      *markdown.lists.insert_item*

The list item insertion commands are intended to be invoked by custom keymaps.
(see |markdown.config.on_attach|). Both commands maintain the same
indentation and list marker as the item under the cursor. The commands do
nothing if the cursor is not within an existing list.

When inserting an item in an ordered list, numbering is reset automatically
for that list. To reset numbering for all ordered lists in a buffer see
|markdown.lists.reset_numbering|.

                                                            *:MDListItemBelow*
:MDListItemBelow        Inserts a new list item below the current cursor
                        position.

                                                            *:MDListItemAbove*
:MDListItemAbove        Inserts a new list item above the current cursor
                        position.

RESET NUMBERING                               *markdown.lists.reset_numbering*

                                                       *:MDResetListNumbering*
:MDResetListNumbering   Resets the numbering of all ordered lists in the
                        current buffer (normal mode) or under selected lines
                        (visual mode).

TOGGLE TASKS                                      *markdown.lists.toggle_task*

                                                               *:MDTaskToggle*
:MDTaskToggle           Toggles the task(s) on the current cursor line (normal
                        mode) or under selected lines (visual mode).

--------------------------------------------------------------------------------
LINKS                                                         *markdown.links*

Link keymaps are set up after |markdown.nvim| is either configured with a call
to |markdown.setup()| or registered as an |nvim-treesitter| module (see
|markdown.configuration|). |<Plug>| mappings are created regardless of
configuration (see |markdown.plug_mappings|).

ADD                                                       *markdown.links.add*

Links can be added over vim motions in normal and visual mode. Links are only
added when the motion is within one inline block (i.e., not over list markers,
blank lines, etc.). In normal mode this is done with `gl{motion}` and over a
visual selection with `gl`.

FOLLOW                                                 *markdown.links.follow*

Follow links under the cursor in normal mode with `gx`. The following link
destinations are supported for in-editor navigation:

* `#destination`: Headings in the current buffer
* `./destination`: Files and directories relative to the current buffer
* `/destination`: Files and directories relative to the working directory
* Other absolute path destinations are opened if they exist

Link destination URLs that begin with `https://`, `http://`, and `www.` are
also supported and are opened in the browser.

PASTE URLS                                              *markdown.links.paste*

URLs can be pasted over a visual selection (not a visual block selection) from
the system clipboard as markdown links. The visual selection must be contained
by one inline block (i.e., conversion to a link will not occur if the visual
selection includes blank lines, list markers, etc.).

--------------------------------------------------------------------------------
NAVIGATION                                               *markdown.navigation*

|markdown.nvim| provides the following keymaps to navigate markdown buffers:

* Go to the current section heading     `]c`
* Go to the parent section heading      `]p`
* Go to the next section heading        `]]`
* Go to the previous section heading    `[[`

Keymaps are set up after |markdown.nvim| is either configured with
a call to to |markdown.setup()| or registered as an |nvim-treesitter| module
(see |markdown.configuration|). |<Plug>| mappings are created regardless of
configuration (see |markdown.plug_mappings|).

================================================================================
CONFIGURATION                                         *markdown.configuration*

|markdown.nvim| can be configured either as a standalone plugin or as an
|nvim-treesitter| module. To configure as a standalone plugin, call
`require("markdown").setup()`. To configure as an |nvim-treesitter| module,
call:
>lua
        require("nvim-treesitter.configs").setup({
            markdown = {
                enable = true,
                -- user configuration goes here
                inline_surround = { --[[ ... ]] },
                on_attach = function(bufnr) --[[ ... ]] end,
            }
        })
<
                                                      *markdown.plug_mappings*
|markdown.nvim| sets up |<Plug>| mappings regardless of configuration. Most
are used by the |markdown.config.mappings|:
>vim
        <Plug>(markdown_toggle_emphasis)
        <Plug>(markdown_toggle_emphasis_line)
        <Plug>(markdown_toggle_emphasis_visual)
        <Plug>(markdown_delete_emphasis)
        <Plug>(markdown_change_emphasis)
        <Plug>(markdown_add_link)
        <Plug>(markdown_add_link_visual)
        <Plug>(markdown_follow_link)
        <Plug>(markdown_go_current_heading)
        <Plug>(markdown_go_parent_heading)
        <Plug>(markdown_go_next_heading)
        <Plug>(markdown_go_prev_heading)
<
The following |<Plug>| mappings are not used by |markdown.nvim|'s
configuration:

`<Plug>(markdown_follow_link_default_app)`
    Like `<Plug>(markdown_follow_link)` but opens links to non-markdown files
    in the default application for the link destination. The
    |markdown.config.hooks| function `follow_link` is called before following
    the link with the option 'use_default_app' set to 'true'.


markdown.setup({opts})                                      *markdown.setup()*
    Both the standalone plugin and |nvim-treesitter| module configurations
    accept the same table argument:
>lua
        require("markdown").setup({
            mappings = {
                inline_surround_toggle = "gs",
                inline_surround_toggle_line = "gss",
                inline_surround_delete = "ds",
                inline_surround_change = "cs",
                link_add = "gl",
                link_follow = "gx",
                go_curr_heading = "]c",
                go_parent_heading = "]p",
                go_next_heading = "]]",
                go_prev_heading = "[[",
            },
            inline_surround = {
                emphasis = {
                    key = "i",
                    txt = "*",
                },
                strong = {
                    key = "b",
                    txt = "**",
                },
                strikethrough = {
                    key = "s",
                    txt = "~~",
                },
                code = {
                    key = "c",
                    txt = "`",
                },
            },
            link = {
                paste = {
                    enable = true,
                },
            },
            toc = {
                omit_heading = "toc omit heading",
                omit_section = "toc omit section",
                markers = { "-" },
            },
            hooks = {
                follow_link = nil,
            },
            on_attach = nil,
        })
<
                                                    *markdown.config.mappings*
    mappings: ~
        Defines keymaps. Mappings can be selectively disabled by setting the
        corresponding field to "false". Disable all mappings by setting the
        entire field to "false".

        Fields:
            * inline_surround_toggle        begins |{motion}| to toggle
                                            emphasis
                                            Default: "gs"
                                            See: |markdown.inline.toggle|

            * inline_surround_toggle_line   toggles emphasis around a line
                                            Default: "gss"
                                            See: |markdown.inline.toggle|

            * inline_surround_delete        deletes emphasis around the cursor
                                            Default: "ds"
                                            See: |markdown.inline.delete|

            * inline_surround_change        changes emphasis around the cursor
                                            Default: "cs"
                                            See: |markdown.inline.change|

            * link_add                      begins |{motion}| to add link
                                            Default: "gl"
                                            See: |markdown.links.add|

            * link_follow                   follows link under the cursor
                                            Default: "gx"
                                            See: |markdown.links.follow|

            * go_curr_heading               sets the cursor to the current
                                            section heading
                                            Default: "]c"
                                            See: |markdown.navigation|

            * go_parent_heading             sets the cursor to the parent
                                            section heading
                                            Default: "]p"
                                            See: |markdown.navigation|

            * go_next_heading               sets the cursor to the next
                                            section heading 
                                            Default: "]]"
                                            See: |markdown.navigation|

            * go_prev_heading               sets the cursor to the previous
                                            section heading 
                                            Default: "[["
                                            See: |markdown.navigation|

                                    *markdown.config.inline_surround.emphasis*
                                      *markdown.config.inline_surround.strong*
                               *markdown.config.inline_surround.strikethrough*
                                        *markdown.config.inline_surround.code*
    inline_surround.emphasis: ~
    inline_surround.strong: ~
    inline_surround.strikethrough: ~
    inline_surround.code: ~
        Defines keys and text for each inline style.

        Keys are used when toggling, deleting, and changing inline styles.

        Text is only used to specify what should be inserted when toggling or
        changing inline styles. Otherwise, when removing emphasis or code span
        characters in toggle, delete, and change operations, |treesitter| nodes
        are used. As such, take care to specify valid inline style characters
        for each `txt` field. Invalid inline styles will be able to be
        inserted, but they will have to be removed manually.

        Fields:
            * key           key associated with each inline style
                            Defaults:
                            * emphasis: "i"
                            * strong: "b"
                            * strikethrough: "s"
                            * code: "c"

            * txt           text inserted when toggling or changing the
                            corresponding inline style
                            Defaults:
                            * emphasis: "*"
                            * strong: "**"
                            * strikethrough: "~~"
                            * code: "`"

                                                  *markdown.config.link.paste*
    link.paste: ~
        Defines |markdown.links.paste| behavior for pasting URLs from the
        clipboard.

        Fields:
            * enable        enables URL-to-link conversion on paste
                            Default: true

                                            *markdown.config.toc.omit_heading*
                                            *markdown.config.toc.omit_section*
    toc.omit_heading: ~
    toc.omit_section: ~
        Defines comment text to flag headings and sections for omission in
        table of contents.

        Defaults:
            * omit_heading: "toc omit heading"
            * omit_section: "toc omit section"
        See: |markdown.toc.omit|

                                                 *markdown.config.toc.markers*
    toc.markers: ~
        Defines alternating markers to use for each heading level when
        inserting a table of contents. Ordered list can be specified with `"."`
        and `")"`.

        Default: { "-" }
        See: |:MDInsertToc|

                                                       *markdown.config.hooks*
    hooks: ~
        Functions that allow for overriding or extending default behavior.
        Called with a table of options and a fallback function with default
        behavior.

        Field signature: fun(opts: table, fallback: fun())

        Fields:
            * follow_link   called when following links with the following
                            options:
                            * dest: the link destination
                            * use_default_app: whether to open the link with
                              the default application for the link destination
                              (see |markdown.plug_mappings|)
                            Default: nil

                                                   *markdown.config.on_attach*
    on_attach: ~
        Function called when |markdown.nvim| attaches to a buffer. Useful for
        creating additional buffer-only keymaps.

        Signature: fun(bufnr: integer)
        Default: nil

        Usage:
>lua
            require("markdown").setup({
                on_attach = function(bufnr)
                    local map = vim.keymap.set
                    local opts = { buffer = bufnr }
                    map({ 'n', 'i' }, '<M-l><M-o>', '<Cmd>MDListItemBelow<CR>', opts)
                    map({ 'n', 'i' }, '<M-L><M-O>', '<Cmd>MDListItemAbove<CR>', opts)
                    map('n', '<M-c>', '<Cmd>MDTaskToggle<CR>', opts)
                    map('x', '<M-c>', ':MDTaskToggle<CR>', opts)
                end,
            })
<
        `on_attach` can be used to support standard/typical inline style
        keybindings in visual mode like `<C-b>` for strong/bold and `<C-i>`
        for for emphasis/italic:
>lua
            on_attach = function(bufnr)
                local function toggle(key)
                    return "<Esc>gv<Cmd>lua require'markdown.inline'"
                        .. ".toggle_emphasis_visual('" .. key .. "')<CR>"
                end

                vim.keymap.set("x", "<C-b>", toggle("b"), { buffer = bufnr })
                vim.keymap.set("x", "<C-i>", toggle("i"), { buffer = bufnr })
            end,
<



 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
